/*
    Problem URL:    https://leetcode.com/problems/maximum-swap/
    Problem ID:     670
    Issue ID:       23
*/

#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

class Solution {
private:
    // Should return maximum value and at which possition
    vector<size_t> maxPositions(const string& str) {
        vector<size_t> retValues;
        int maxValue = ( (int) str[0] ) - 48;

        for( size_t i=1; i<str.length(); i++ ) {
            auto currValue { str[i] - 48 };
            
            // Updating the max value and the index also
            if( currValue >= maxValue ) {
                retValues.emplace_back(i);
                maxValue = currValue;
            }
        }

        return retValues;
    }

    // Swaps characters in a string
    void swapChars(string& str, size_t srcIndex, size_t destIndex ) {
        auto temp { str[srcIndex] };
        str[srcIndex] = str[destIndex];
        str[destIndex] = temp;
    }

public:
    int maximumSwap(int num) {
        // Converting the number to string
        stringstream ss;
        ss << num;
        string numString { ss.str() };
        auto numCopy{ numString };
        size_t startIndex { 0 };
        vector<size_t> swapIndexes;

        while( numCopy.length() ) {
            auto maxIndex { maxPositions(numCopy) };
            
            // No swap, possible number swap would on the next array
            if( maxIndex.size() != 0 && maxIndex[0] != 0 ) {
                for( auto i : maxIndex ) {
                    swapIndexes.emplace_back(startIndex + i); 
                }

                break;
            }

            // Looking if swaping on the next index can be helpfull or not
            startIndex++;
            numCopy.erase(numCopy.begin());
        }

        vector<int> maxValues;
        maxValues.emplace_back(atoi(numString.c_str()));
        for( auto idx : swapIndexes ) {
            auto s { numString };
            swapChars(s, startIndex, idx);
            maxValues.emplace_back(atoi(s.c_str()));
        }

        return *max_element(maxValues.begin(), maxValues.end());        
    }
};

void test670() {
    Solution s;

    // Should output 7236
    cout << s.maximumSwap(2736) << endl;

    // Should output 9973
    cout << s.maximumSwap(9973) << endl;

    // If the first number is max, we should look for the next one
    // Should ouput 98863
    cout << s.maximumSwap(98368) << endl;

    // Although there is a 9 on the second position, swaping with the third given max result
    cout << s.maximumSwap(1993) << endl;
}

int main(int argc, const char *argv[]) {
    test670();
    return 0;
}
